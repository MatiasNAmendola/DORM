/*
  DORM (Document Object Render Model)
  author: Mariz Melo (c) MIT 2013
*/

// Dependencies
var html = require("html"); // prettify HTML lib (replace later)

// Object constructor
var DORM = function(){};  // object constructor
var dorm = DORM.prototype;  // cache prototype

// configuration model
dorm.model = {
  ident : 4  // indentation spaces
, selfclose : ["meta", "br", "hr", "link", "doctype"]  // HTML tags that are self-closed
, buffer : "" // buffer the HTML content generated by .buffer method
, pretty : 1 // 0 - don't prettify HTML code, 1 - prettify HTML code
, doctype : "!DOCTYPE html" // HTML version (HTML 5 is default)
}

// function chains feature
Function.prototype.chain = function() {
  var self = this; // cache obj
  return function() {
    var ret = self.apply(this, arguments);
    return ret === undefined ? this : ret;
  }
};

dorm.attr = function (attr) {
  // return HTML attributes for tag elements
  var attreturn = "";
  for (key in attr) {
    switch (key) {
      case "class":
        attreturn += dorm.class(attr[key]);
      break;
      case "style":
        attreturn += dorm.style(attr[key]);
      default:
        attreturn += " " + key + "=\""+ attr[key] + "\"";
      break;
    }
  }
  return attreturn;
}

dorm.class = function(classes) {
  // receive an array with classes of the element and generate HTML syntax
  return " class=\""+classes.toString().replace(","," ")+"\"";  // convert array to CVS and replace commas with spaces
}

dorm.tag = function(tag, attr) {
  // return encapsulated tag element
  if(attr) {
    return "<" + tag + dorm.attr(attr) + ">";
  } else {
    // writing HTML DOCTYPE (if exit on DORM obj)
    if(tag == "doctype"){
      return "<" + this.model.doctype + ">";
    }else{
      return "<" + tag + ">";  
    }
  }
}

dorm.tagclose = function(tag) {
  // return encapsulated closed tag element
  return "</"+tag+">";
}

dorm.buffer = function(dom) {
  // buffers the entire DORM objects
  
  // look for all tag elements
  for (var key in dom) {
    
    // if element has TEXT content display
    if(key === "text") {
      dorm.model.buffer += dom[key] ;
    }else{

       dorm.model.buffer += dorm.tag(key, dom[key]["attr"]); // writes the open tag element
    
      // look for children nodes
      if(dom[key]["children"] && dom[key]["children"].length > 0) {

        // go over all children elements
        for(var i=0; i <= dom[key]["children"].length; ++i) {
          dorm.buffer(dom[key]["children"][i]); // recursive call for other tag elements
        }
      }

      // check for self-closing elements
      if(dorm.model.selfclose.indexOf(key) == -1){
        dorm.model.buffer += dorm.tagclose(key);
      }

    }//if-else (key === "text")

  }//for (var key in dom)
};

dorm.render = function(dom) {
  // calls buffer method and display buffer model data

  this.model.buffer = ""; // clears current dorm.model.buffer
  this.buffer(dom); // buffer HTML output

  if(this.model.pretty) {
    process.stdout.write( html.prettyPrint(this.model.buffer, {indent_size: this.model.ident}) );
  } else {
    process.stdout.write(this.model.buffer); // display HTML output
  }

}.chain();


// EXAMPLE
dorm.render({
  "doctype": "",
  "html": {
    "events" : {
      click : function(){}
    },
    "attr" : { 
      "class": [
      "responsive",
      "width-full"
      ]
    },
    "children": [
      {
        "head": {
          "children": [
            { "meta": {}},
            {"link": {}}, 
            { "title": { "children" : [{"text" : "hello world"}] }}, 
            {"script" : {"attr":{"href": "//cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js"}}}
          ]
        }
      },
      {
        "body": {
          "children": [
            {
              "div": {
                "attr" : {
                  "id": "mydiv"
                },
                "children" : [{"text" : "Hi there"}]
              }
            },
            {
              "div": {
                "attr" : {
                  "id": "mydiv2",
                  "name": "mydiv2name"
                },
                "children":[
                {"p" : {"children" : [{ "text" : "hello" }, { "span" :  {"children" : [{ "text" : "world" }]} }, {"text":"again"}]}}
                ]
              }
            }
          ]
        }
      }
    ]
  }
});